{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Seamus\\\\Documents\\\\ChatApp\\\\chat-app\\\\components\\\\SendMessageForm.js\";\nimport React, { useContext, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport AuthContext from \"../contexts/AuthContext\";\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nexport default function SendMessageForm(props) {\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width,\n      height = _useWindowDimensions.height;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      messageText = _useState2[0],\n      _onChangeText = _useState2[1];\n\n  var _useContext = useContext(AuthContext),\n      auth = _useContext.auth,\n      messageRef = _useContext.messageRef;\n\n  var sendMessage = function sendMessage() {\n    var _auth$currentUser, uid, photoURL;\n\n    return _regeneratorRuntime.async(function sendMessage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _auth$currentUser = auth.currentUser, uid = _auth$currentUser.uid, photoURL = _auth$currentUser.photoURL;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(messageRef.add({\n              text: messageText,\n              createdAt: firebase.firestore.Timestamp.now(),\n              uid: uid,\n              photoURL: photoURL\n            }));\n\n          case 3:\n            _onChangeText('');\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var styles = StyleSheet.create({\n    NewMessageContainer: {\n      marginRight: 'auto',\n      marginLeft: 'auto',\n      flex: 1,\n      flexDirection: 'row',\n      justifyContent: 'center',\n      alignContent: 'center',\n      minHeight: 0.07 * height,\n      maxHeight: 0.07 * height,\n      backgroundColor: '#2A2B2D',\n      borderRadius: 15,\n      zIndex: 2,\n      minWidth: '90%'\n    },\n    TextInput: {\n      fontSize: 20,\n      minWidth: '85%',\n      maxWidth: '85%',\n      padding: 7,\n      borderRadius: 15\n    },\n    SendMessageContainer: {\n      flex: 1,\n      flexGrow: 1,\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      backgroundColor: '#2DA8D8FF',\n      flexBasis: 100,\n      maxHeight: 0.07 * height,\n      borderRadius: 15\n    },\n    SendText: {\n      color: '#fff'\n    },\n    SendMessageButton: {}\n  });\n  return React.createElement(View, {\n    style: styles.NewMessageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    multiline: true,\n    onSubmitEditing: function onSubmitEditing() {\n      return sendMessage();\n    },\n    style: styles.TextInput,\n    value: messageText,\n    onChangeText: function onChangeText(text) {\n      return _onChangeText(text);\n    },\n    placeholder: \"Enter your message\",\n    t: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: styles.SendMessageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.SendMessageButton,\n    onPress: function onPress() {\n      return sendMessage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.SendText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"Send\"))));\n}","map":{"version":3,"sources":["C:/Users/Seamus/Documents/ChatApp/chat-app/components/SendMessageForm.js"],"names":["React","useContext","useState","TouchableOpacity","AuthContext","firebase","SendMessageForm","props","useWindowDimensions","width","height","messageText","onChangeText","auth","messageRef","sendMessage","currentUser","uid","photoURL","add","text","createdAt","firestore","Timestamp","now","styles","StyleSheet","create","NewMessageContainer","marginRight","marginLeft","flex","flexDirection","justifyContent","alignContent","minHeight","maxHeight","backgroundColor","borderRadius","zIndex","minWidth","TextInput","fontSize","maxWidth","padding","SendMessageContainer","flexGrow","alignItems","flexBasis","SendText","color","SendMessageButton"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA6C,OAA7C;;;;;;;;AAEA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAOC,WAAP;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAO,oBAAP;AAGA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA,6BACjBC,mBAAmB,EADF;AAAA,MACnCC,KADmC,wBACnCA,KADmC;AAAA,MAC5BC,MAD4B,wBAC5BA,MAD4B;;AAAA,kBAEPR,QAAQ,CAAC,EAAD,CAFD;AAAA;AAAA,MAEpCS,WAFoC;AAAA,MAEvBC,aAFuB;;AAAA,oBAGdX,UAAU,CAACG,WAAD,CAHI;AAAA,MAGnCS,IAHmC,eAGnCA,IAHmC;AAAA,MAG7BC,UAH6B,eAG7BA,UAH6B;;AAM3C,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCACUF,IAAI,CAACG,WADf,EACRC,GADQ,qBACRA,GADQ,EACHC,QADG,qBACHA,QADG;AAAA;AAAA,6CAEVJ,UAAU,CAACK,GAAX,CAAe;AACjBC,cAAAA,IAAI,EAAET,WADW;AAEjBU,cAAAA,SAAS,EAAEhB,QAAQ,CAACiB,SAAT,CAAmBC,SAAnB,CAA6BC,GAA7B,EAFM;AAGjBP,cAAAA,GAAG,EAAHA,GAHiB;AAIjBC,cAAAA,QAAQ,EAARA;AAJiB,aAAf,CAFU;;AAAA;AAQhBN,YAAAA,aAAY,CAAC,EAAD,CAAZ;;AARgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAWA,MAAMa,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC7BC,IAAAA,mBAAmB,EAAE;AACjBC,MAAAA,WAAW,EAAE,MADI;AAEjBC,MAAAA,UAAU,EAAE,MAFK;AAGjBC,MAAAA,IAAI,EAAE,CAHW;AAIjBC,MAAAA,aAAa,EAAE,KAJE;AAKjBC,MAAAA,cAAc,EAAE,QALC;AAMjBC,MAAAA,YAAY,EAAE,QANG;AAOjBC,MAAAA,SAAS,EAAE,OAAOzB,MAPD;AAQjB0B,MAAAA,SAAS,EAAE,OAAO1B,MARD;AASjB2B,MAAAA,eAAe,EAAE,SATA;AAUjBC,MAAAA,YAAY,EAAE,EAVG;AAWjBC,MAAAA,MAAM,EAAE,CAXS;AAYjBC,MAAAA,QAAQ,EAAE;AAZO,KADQ;AAe7BC,IAAAA,SAAS,EAAE;AACPC,MAAAA,QAAQ,EAAE,EADH;AAEPF,MAAAA,QAAQ,EAAE,KAFH;AAGPG,MAAAA,QAAQ,EAAE,KAHH;AAIPC,MAAAA,OAAO,EAAE,CAJF;AAKPN,MAAAA,YAAY,EAAE;AALP,KAfkB;AAuB7BO,IAAAA,oBAAoB,EAAE;AAClBd,MAAAA,IAAI,EAAE,CADY;AAElBe,MAAAA,QAAQ,EAAE,CAFQ;AAGlBd,MAAAA,aAAa,EAAE,KAHG;AAIlBC,MAAAA,cAAc,EAAE,YAJE;AAKlBc,MAAAA,UAAU,EAAE,QALM;AAMlBV,MAAAA,eAAe,EAAE,WANC;AAOlBW,MAAAA,SAAS,EAAE,GAPO;AAQlBZ,MAAAA,SAAS,EAAE,OAAO1B,MARA;AASlB4B,MAAAA,YAAY,EAAE;AATI,KAvBO;AAkC7BW,IAAAA,QAAQ,EAAE;AACNC,MAAAA,KAAK,EAAE;AADD,KAlCmB;AAqC7BC,IAAAA,iBAAiB,EAAE;AArCU,GAAlB,CAAf;AA0CA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE1B,MAAM,CAACG,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAE,IAAtB;AAA4B,IAAA,eAAe,EAAE;AAAA,aAAMb,WAAW,EAAjB;AAAA,KAA7C;AAAkE,IAAA,KAAK,EAAEU,MAAM,CAACgB,SAAhF;AAA2F,IAAA,KAAK,EAAE9B,WAAlG;AAA+G,IAAA,YAAY,EAAE,sBAAAS,IAAI;AAAA,aAAIR,aAAY,CAACQ,IAAD,CAAhB;AAAA,KAAjI;AAAyJ,IAAA,WAAW,EAAC,oBAArK;AAA0L,IAAA,CAAC,MAA3L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEK,MAAM,CAACoB,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEpB,MAAM,CAAC0B,iBAAhC;AAAmD,IAAA,OAAO,EAAE;AAAA,aAAMpC,WAAW,EAAjB;AAAA,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEU,MAAM,CAACwB,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ,CAFJ,CADJ;AAaH","sourcesContent":["import React, { useContext, useState, } from 'react'\r\nimport { StyleSheet, Text, View, Image, TextInput, Dimensions, useWindowDimensions } from 'react-native';\r\nimport { TouchableOpacity } from 'react-native-gesture-handler'\r\nimport AuthContext from '../contexts/AuthContext';\r\nimport firebase from 'firebase'\r\nimport 'firebase/firestore'\r\n\r\n\r\nexport default function SendMessageForm(props) {\r\n    const { width, height } = useWindowDimensions()\r\n    const [messageText, onChangeText] = useState('')\r\n    const { auth, messageRef } = useContext(AuthContext)\r\n\r\n\r\n    const sendMessage = async () => {\r\n        const { uid, photoURL } = auth.currentUser\r\n        await messageRef.add({\r\n            text: messageText,\r\n            createdAt: firebase.firestore.Timestamp.now(),\r\n            uid,\r\n            photoURL\r\n        });\r\n        onChangeText('')\r\n    }\r\n\r\n    const styles = StyleSheet.create({\r\n        NewMessageContainer: {\r\n            marginRight: 'auto',\r\n            marginLeft: 'auto',\r\n            flex: 1,\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignContent: 'center',\r\n            minHeight: 0.07 * height,\r\n            maxHeight: 0.07 * height,\r\n            backgroundColor: '#2A2B2D',\r\n            borderRadius: 15,\r\n            zIndex: 2,\r\n            minWidth: '90%'\r\n        },\r\n        TextInput: {\r\n            fontSize: 20,\r\n            minWidth: '85%',\r\n            maxWidth: '85%',\r\n            padding: 7,\r\n            borderRadius: 15,\r\n\r\n        },\r\n        SendMessageContainer: {\r\n            flex: 1,\r\n            flexGrow: 1,\r\n            flexDirection: 'row',\r\n            justifyContent: 'flex-start',\r\n            alignItems: 'center',\r\n            backgroundColor: '#2DA8D8FF',\r\n            flexBasis: 100,\r\n            maxHeight: 0.07 * height,\r\n            borderRadius: 15\r\n        },\r\n        SendText: {\r\n            color: '#fff',\r\n        },\r\n        SendMessageButton: {\r\n\r\n        }\r\n    });\r\n\r\n    return (\r\n        <View style={styles.NewMessageContainer}>\r\n            <TextInput multiline={true} onSubmitEditing={() => sendMessage()} style={styles.TextInput} value={messageText} onChangeText={text => onChangeText(text)} placeholder='Enter your message' t></TextInput>\r\n            <View style={styles.SendMessageContainer}>\r\n                <TouchableOpacity style={styles.SendMessageButton} onPress={() => sendMessage()}>\r\n                    <Text style={styles.SendText}>Send</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n\r\n        </View>\r\n    )\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}