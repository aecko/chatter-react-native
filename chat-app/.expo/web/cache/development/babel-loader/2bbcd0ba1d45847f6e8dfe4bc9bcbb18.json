{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Seamus\\\\Documents\\\\ChatApp\\\\chat-app\\\\App.js\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport ChatBox from \"./screens/ChatBox\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport AuthContext from \"./contexts/AuthContext\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport * as FirebaseCore from 'expo-firebase-core';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport NavBar from \"./components/NavBar\";\nimport * as GoogleSignIn from 'expo-google-sign-in';\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(FirebaseCore.DEFAULT_APP_OPTIONS);\n} else {\n  firebase.app();\n}\n\nvar auth = firebase.auth();\nvar firestore = firebase.firestore();\nvar MainNavigator = createStackNavigator({\n  Chat: ChatBox\n}, {\n  headerMode: 'none'\n});\nvar AppNavigator = createAppContainer(MainNavigator);\nexport default function App() {\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width,\n      height = _useWindowDimensions.height;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      userMobile = _useState2[0],\n      setUserMobile = _useState2[1];\n\n  var _useAuthState = useAuthState(auth),\n      _useAuthState2 = _slicedToArray(_useAuthState, 2),\n      user = _useAuthState2[0],\n      loading = _useAuthState2[1];\n\n  var value = {\n    auth: auth,\n    firestore: firestore\n  };\n  var styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      flexDirection: 'column',\n      flexGrow: 0,\n      justifyContent: 'center',\n      backgroundColor: '#125495',\n      maxWidth: width,\n      maxHeight: height\n    }\n  });\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, loading ? React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 18\n    }\n  }, \"HELLLLLOOOOO...\") : React.createElement(AuthContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, React.createElement(NavBar, {\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), user ? React.createElement(ChatBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }\n  }) : React.createElement(LoginScreen, {\n    auth: auth,\n    googleLogin: firestore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 33\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/Seamus/Documents/ChatApp/chat-app/App.js"],"names":["React","useEffect","useState","createAppContainer","createStackNavigator","ChatBox","LoginScreen","AuthContext","firebase","FirebaseCore","useAuthState","NavBar","GoogleSignIn","apps","length","initializeApp","DEFAULT_APP_OPTIONS","app","auth","firestore","MainNavigator","Chat","headerMode","AppNavigator","App","useWindowDimensions","width","height","userMobile","setUserMobile","user","loading","value","styles","StyleSheet","create","container","flex","flexDirection","flexGrow","justifyContent","backgroundColor","maxWidth","maxHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;AAGA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,OAAOC,OAAP;AACA,OAAOC,WAAP;AAEA,OAAOC,WAAP;AAGA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AAEA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,MAAP;AACA,OAAO,KAAKC,YAAZ,MAA8B,qBAA9B;;AAEA,IAAI,CAACJ,QAAQ,CAACK,IAAT,CAAcC,MAAnB,EAA2B;AACzBN,EAAAA,QAAQ,CAACO,aAAT,CAAuBN,YAAY,CAACO,mBAApC;AACD,CAFD,MAEM;AACJR,EAAAA,QAAQ,CAACS,GAAT;AACD;;AACD,IAAMC,IAAI,GAAGV,QAAQ,CAACU,IAAT,EAAb;AACA,IAAMC,SAAS,GAAGX,QAAQ,CAACW,SAAT,EAAlB;AAEA,IAAMC,aAAa,GAAGhB,oBAAoB,CACxC;AACEiB,EAAAA,IAAI,EAAEhB;AADR,CADwC,EAIxC;AACEiB,EAAAA,UAAU,EAAE;AADd,CAJwC,CAA1C;AAQA,IAAMC,YAAY,GAAGpB,kBAAkB,CAACiB,aAAD,CAAvC;AAGA,eAAe,SAASI,GAAT,GAAe;AAAA,6BAEFC,mBAAmB,EAFjB;AAAA,MAEpBC,KAFoB,wBAEpBA,KAFoB;AAAA,MAEbC,MAFa,wBAEbA,MAFa;;AAAA,kBAGQzB,QAAQ,CAAC,IAAD,CAHhB;AAAA;AAAA,MAGrB0B,UAHqB;AAAA,MAGTC,aAHS;;AAAA,sBAIJnB,YAAY,CAACQ,IAAD,CAJR;AAAA;AAAA,MAIrBY,IAJqB;AAAA,MAIfC,OAJe;;AAK5B,MAAMC,KAAK,GAAG;AAAEd,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,SAAS,EAATA;AAAR,GAAd;AAEA,MAAMc,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE,CADG;AAETC,MAAAA,aAAa,EAAE,QAFN;AAGTC,MAAAA,QAAQ,EAAE,CAHD;AAITC,MAAAA,cAAc,EAAE,QAJP;AAKTC,MAAAA,eAAe,EAAE,SALR;AAMTC,MAAAA,QAAQ,EAAEhB,KAND;AAOTiB,MAAAA,SAAS,EAAEhB;AAPF;AADoB,GAAlB,CAAf;AAmDA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEM,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,OAAO,GAAG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAH,GACN,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAEF,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGA,IAAI,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAiB,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAEZ,IAAnB;AAAyB,IAAA,WAAW,EAAEC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFxB,CAFJ,CADF;AAUD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, useWindowDimensions, Button, Platform } from 'react-native';\n\nimport { createAppContainer } from 'react-navigation'\nimport { createStackNavigator } from 'react-navigation-stack'\nimport ChatBox from './screens/ChatBox';\nimport LoginScreen from './screens/LoginScreen';\n\nimport AuthContext from './contexts/AuthContext'\n\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport * as FirebaseCore from 'expo-firebase-core';\n\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport NavBar from './components/NavBar';\nimport * as GoogleSignIn from 'expo-google-sign-in';\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(FirebaseCore.DEFAULT_APP_OPTIONS);\n}else {\n  firebase.app(); // if already initialized, use that one\n}\nconst auth = firebase.auth();\nconst firestore = firebase.firestore()\n\nconst MainNavigator = createStackNavigator(\n  {\n    Chat: ChatBox\n  },\n  {\n    headerMode: 'none'\n  }\n)\nconst AppNavigator = createAppContainer(MainNavigator)\n\n\nexport default function App() {\n\n  const { width, height } = useWindowDimensions()\n  const [userMobile, setUserMobile] = useState(null);\n  const [user, loading] = useAuthState(auth);\n  const value = { auth, firestore }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      flexDirection: 'column',\n      flexGrow: 0,\n      justifyContent: 'center',\n      backgroundColor: '#125495',\n      maxWidth: width,\n      maxHeight: height,\n\n    },\n  });\n\n  //////////////google sign in stuff\n/*\n  useEffect(() => {\n    if(Platform.OS == 'android' || Platform.OS== 'ios'){\n      initAsync()\n    }\n  })\n\n  const initAsync = async () => {\n    await GoogleSignIn.initAsync();\n    _syncUserWithStateAsync();\n  };\n\n  const _syncUserWithStateAsync = async () => {\n    const userMobileNew = await GoogleSignIn.signInSilentlyAsync();\n    setUserMobile(userMobileNew)\n  };\n\n\n  const signOutAsync = async () => {\n    await GoogleSignIn.signOutAsync();\n    setUserMobile(null)\n  };\n  const signInAsync = async () => {\n    try {\n      await GoogleSignIn.askForPlayServicesAsync();\n      const { type, user } = await GoogleSignIn.signInAsync();\n      if (type === 'success') {\n        _syncUserWithStateAsync();\n        console.log('signed in')\n      }\n    } catch ({ message }) {\n      alert('login: Error:' + message);\n    }\n  };\n  */\n\n\n  return (\n    <View style={styles.container}>\n      {loading ? <Text>HELLLLLOOOOO...</Text> :\n        <AuthContext.Provider value={value}>\n          <NavBar user={user} />\n          {user ? <ChatBox /> : <LoginScreen auth={auth} googleLogin={firestore} />}\n        </AuthContext.Provider>\n      }\n    </View>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}