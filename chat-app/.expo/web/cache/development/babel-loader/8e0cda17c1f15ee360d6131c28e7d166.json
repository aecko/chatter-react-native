{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Seamus\\\\Documents\\\\ChatApp\\\\chat-app\\\\screens\\\\LoginScreen.js\";\nimport React, { useState, useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport * as GoogleSignIn from 'expo-google-sign-in';\nimport firebase from 'firebase';\nimport 'firebase/auth';\nimport AuthContext from \"../contexts/AuthContext\";\nexport default function LoginScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useContext = useContext(AuthContext),\n      auth = _useContext.auth,\n      setLoadingApp = _useContext.setLoadingApp;\n\n  var signInWithGoogle = function signInWithGoogle() {\n    if (Platform.OS == 'android' || Platform.OS == 'ios') {\n      props.googleLogin();\n    } else {\n      console.log('helllooo there phone');\n      var provider = new firebase.auth.GoogleAuthProvider();\n      auth.signInWithRedirect(provider);\n    }\n  };\n\n  var signInWithEmail = function signInWithEmail() {\n    auth.signInWithEmailAndPassword(email, password);\n  };\n\n  var signUpWithEmail = function signUpWithEmail() {\n    auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  var fontRatio = PixelRatio.getFontScale();\n\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width,\n      height = _useWindowDimensions.height;\n\n  var styles = StyleSheet.create({\n    LoginContainer: {\n      top: 0.07 * height,\n      left: 0,\n      flex: 0,\n      flexDirection: 'column',\n      backgroundColor: '#2A2B2DFF',\n      alignItems: 'center',\n      justifyContent: 'flex-start',\n      minHeight: 0.93 * height,\n      maxHeight: 0.93 * height,\n      minWidth: width,\n      elevation: 0\n    },\n    LoginTitle: {\n      fontSize: 40,\n      color: '#fff',\n      marginTop: 10\n    },\n    loginButton: {\n      backgroundColor: '#D9514EFF',\n      borderRadius: 25,\n      marginBottom: 20,\n      height: 100\n    },\n    LoginText: {\n      padding: 10 * fontRatio,\n      color: '#fff',\n      fontSize: 30\n    },\n    CredentialsTextInput: {\n      height: 70,\n      width: 200,\n      fontSize: 15 * fontRatio,\n      backgroundColor: '#d5d8dc',\n      borderRadius: 20,\n      marginBottom: 10,\n      textAlign: 'center',\n      zIndex: 100,\n      elevation: 1\n    }\n  });\n  return React.createElement(View, {\n    style: styles.LoginContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.LoginTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"Login\"), React.createElement(TextInput, {\n    placeholder: \"Enter email\",\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    style: styles.CredentialsTextInput,\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Enter password\",\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    style: styles.CredentialsTextInput,\n    value: password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return signInWithEmail();\n    },\n    style: styles.loginButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.LoginText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Sign in with email\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return signUpWithEmail();\n    },\n    style: styles.loginButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.LoginText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, \"Sign up with email\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return signInWithGoogle();\n    },\n    style: styles.loginButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.LoginText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, \"Sign in with Google\")));\n}","map":{"version":3,"sources":["C:/Users/Seamus/Documents/ChatApp/chat-app/screens/LoginScreen.js"],"names":["React","useState","useContext","TouchableOpacity","GoogleSignIn","firebase","AuthContext","LoginScreen","props","email","setEmail","password","setPassword","auth","setLoadingApp","signInWithGoogle","Platform","OS","googleLogin","console","log","provider","GoogleAuthProvider","signInWithRedirect","signInWithEmail","signInWithEmailAndPassword","signUpWithEmail","createUserWithEmailAndPassword","fontRatio","PixelRatio","getFontScale","useWindowDimensions","width","height","styles","StyleSheet","create","LoginContainer","top","left","flex","flexDirection","backgroundColor","alignItems","justifyContent","minHeight","maxHeight","minWidth","elevation","LoginTitle","fontSize","color","marginTop","loginButton","borderRadius","marginBottom","LoginText","padding","CredentialsTextInput","textAlign","zIndex","text"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { StyleSheet, Text, View, Image, useWindowDimensions, PixelRatio, Platform, TextInput} from 'react-native'\r\nimport { TouchableOpacity } from 'react-native-gesture-handler'\r\nimport * as GoogleSignIn from 'expo-google-sign-in';\r\nimport firebase from 'firebase'\r\nimport 'firebase/auth'\r\nimport AuthContext from '../contexts/AuthContext';\r\n\r\nexport default function LoginScreen(props) {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const { auth, setLoadingApp } = useContext(AuthContext)\r\n    const signInWithGoogle = () => {\r\n        if (Platform.OS == 'android' || Platform.OS == 'ios') {\r\n            props.googleLogin()\r\n        }\r\n        else {\r\n            console.log('helllooo there phone')\r\n            const provider = new firebase.auth.GoogleAuthProvider();\r\n            auth.signInWithRedirect(provider);\r\n        }\r\n    }\r\n    const signInWithEmail = () => {\r\n        auth.signInWithEmailAndPassword(email, password)\r\n    }\r\n    const signUpWithEmail = () => {\r\n        auth.createUserWithEmailAndPassword(email, password)\r\n    }\r\n    const fontRatio = PixelRatio.getFontScale()\r\n\r\n    const { width, height } = useWindowDimensions()\r\n    const styles = StyleSheet.create({\r\n        LoginContainer: {\r\n            top: 0.07 * height,\r\n            left: 0,\r\n            flex: 0,\r\n            flexDirection: 'column',\r\n            backgroundColor: '#2A2B2DFF',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-start',\r\n            minHeight: 0.93 * height,\r\n            maxHeight: 0.93 * height,\r\n            minWidth: width,\r\n            elevation: 0\r\n\r\n        },\r\n        LoginTitle: {\r\n            fontSize: 40,\r\n            color: '#fff',\r\n            marginTop: 10,\r\n        },\r\n        loginButton: {\r\n            backgroundColor: '#D9514EFF',\r\n            borderRadius: 25,\r\n            marginBottom: 20,\r\n            height: 100\r\n\r\n\r\n        },\r\n        LoginText: {\r\n            padding: 10 * fontRatio,\r\n            color: '#fff',\r\n            fontSize: 30\r\n\r\n        },\r\n        CredentialsTextInput: {\r\n            height: 70,\r\n            width: 200,\r\n            fontSize: 15 * fontRatio,\r\n            backgroundColor: '#d5d8dc',\r\n            borderRadius: 20,\r\n            marginBottom: 10,\r\n            textAlign: 'center',\r\n            zIndex: 100,\r\n            elevation: 1\r\n\r\n        },\r\n\r\n    })\r\n\r\n    return (\r\n        <View style={styles.LoginContainer}>\r\n            <Text style={styles.LoginTitle}>Login</Text>\r\n\r\n            <TextInput placeholder='Enter email'  onChangeText={text => setEmail(text)} style={styles.CredentialsTextInput} value={email}></TextInput>\r\n            <TextInput placeholder='Enter password' onChangeText={text => setPassword(text)} style={styles.CredentialsTextInput} value={password}></TextInput>\r\n\r\n\r\n            <TouchableOpacity onPress={() => signInWithEmail()} style={styles.loginButton}>\r\n                <Text style={styles.LoginText}>Sign in with email</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity onPress={() => signUpWithEmail()} style={styles.loginButton}>\r\n                <Text style={styles.LoginText}>Sign up with email</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity onPress={() => signInWithGoogle()} style={styles.loginButton}>\r\n                <Text style={styles.LoginText}>Sign in with Google</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}