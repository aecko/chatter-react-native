{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Seamus\\\\Documents\\\\ChatApp\\\\chat-app\\\\App.js\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport NavBar from \"./components/NavBar\";\nimport ChatBox from \"./screens/ChatBox\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport AuthContext from \"./contexts/AuthContext\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport * as FirebaseCore from 'expo-firebase-core';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport * as GoogleSignIn from 'expo-google-sign-in';\nimport CreateRoomScreen from \"./components/CreateRoomScreen\";\nimport UsersRooms from \"./components/UsersRooms\";\nimport LoadingScreen from \"./screens/LoadingScreen\";\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(FirebaseCore.DEFAULT_APP_OPTIONS);\n} else {\n  firebase.app();\n}\n\nvar auth = firebase.auth();\nvar firestore = firebase.firestore();\nvar MainNavigator = createStackNavigator({\n  Chat: ChatBox\n}, {\n  headerMode: 'none'\n});\nvar AppNavigator = createAppContainer(MainNavigator);\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      userMobile = _useState2[0],\n      setUserMobile = _useState2[1];\n\n  var _useAuthState = useAuthState(auth),\n      _useAuthState2 = _slicedToArray(_useAuthState, 1),\n      user = _useAuthState2[0];\n\n  var _useState3 = useState('$KVUXRARV9U'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      roomCode = _useState4[0],\n      setRoomCode = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loadingApp = _useState6[0],\n      setLoadingApp = _useState6[1];\n\n  var messageRef = firestore.collection('rooms').doc(roomCode).collection('messages');\n  var query = messageRef.orderBy('createdAt', 'desc').limit(25);\n\n  var _useCollectionData = useCollectionData(query),\n      _useCollectionData2 = _slicedToArray(_useCollectionData, 1),\n      messages = _useCollectionData2[0];\n\n  useEffect(function () {\n    if (Platform.OS == 'android' || Platform.OS == 'ios') {\n      initAsync();\n    }\n  }, []);\n  var value = {\n    auth: auth,\n    firestore: firestore,\n    messageRef: messageRef,\n    messages: messages,\n    setRoomCode: setRoomCode,\n    roomCode: roomCode,\n    setLoadingApp: setLoadingApp\n  };\n  var styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      flexDirection: 'row',\n      flexGrow: 0,\n      justifyContent: 'center',\n      backgroundColor: '#2A2B2D'\n    }\n  });\n\n  var initAsync = function initAsync() {\n    return _regeneratorRuntime.async(function initAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(GoogleSignIn.initAsync());\n\n          case 2:\n            _syncUserWithStateAsync();\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _syncUserWithStateAsync = function _syncUserWithStateAsync() {\n    var userMobileNew, credential;\n    return _regeneratorRuntime.async(function _syncUserWithStateAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(GoogleSignIn.signInSilentlyAsync());\n\n          case 2:\n            userMobileNew = _context2.sent;\n            credential = firebase.auth.GoogleAuthProvider.credential(userMobileNew.idToken, userMobileNew.accessToken);\n            console.log('logged in with credentials: uid : ' + userMobileNew.idToken);\n            auth.signInWithCredential(credential);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var signOutAsync = function signOutAsync() {\n    return _regeneratorRuntime.async(function signOutAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(GoogleSignIn.signOutAsync());\n\n          case 2:\n            setUserMobile(null);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var signInAsync = function signInAsync() {\n    var _await$GoogleSignIn$s, type, _user, message;\n\n    return _regeneratorRuntime.async(function signInAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(GoogleSignIn.askForPlayServicesAsync());\n\n          case 3:\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(GoogleSignIn.signInAsync());\n\n          case 5:\n            _await$GoogleSignIn$s = _context4.sent;\n            type = _await$GoogleSignIn$s.type;\n            _user = _await$GoogleSignIn$s.user;\n\n            if (type === 'success') {\n              _syncUserWithStateAsync();\n\n              console.log('signed in');\n            }\n\n            _context4.next = 15;\n            break;\n\n          case 11:\n            _context4.prev = 11;\n            _context4.t0 = _context4[\"catch\"](0);\n            message = _context4.t0.message;\n            alert('login: Error:' + message);\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n    placeholder: \"Enter email\",\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    style: styles.CredentialsTextInput,\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, loadingApp ? null : null, React.createElement(AuthContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, auth.currentUser ? React.createElement(UsersRooms, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 29\n    }\n  }) : null, React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), user ? React.createElement(ChatBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }) : React.createElement(LoginScreen, {\n    googleLogin: signInAsync,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 31\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/Seamus/Documents/ChatApp/chat-app/App.js"],"names":["React","useEffect","useState","createAppContainer","createStackNavigator","NavBar","ChatBox","LoginScreen","AuthContext","firebase","FirebaseCore","useAuthState","useCollectionData","GoogleSignIn","CreateRoomScreen","UsersRooms","LoadingScreen","apps","length","initializeApp","DEFAULT_APP_OPTIONS","app","auth","firestore","MainNavigator","Chat","headerMode","AppNavigator","App","userMobile","setUserMobile","user","roomCode","setRoomCode","loadingApp","setLoadingApp","messageRef","collection","doc","query","orderBy","limit","messages","Platform","OS","initAsync","value","styles","StyleSheet","create","container","flex","flexDirection","flexGrow","justifyContent","backgroundColor","_syncUserWithStateAsync","signInSilentlyAsync","userMobileNew","credential","GoogleAuthProvider","idToken","accessToken","console","log","signInWithCredential","signOutAsync","signInAsync","askForPlayServicesAsync","type","message","alert","text","setEmail","CredentialsTextInput","email","currentUser"],"mappings":"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","sourcesContent":["//import react features\nimport React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, useWindowDimensions, Button, Platform } from 'react-native';\n\nimport { createAppContainer } from 'react-navigation'\nimport { createStackNavigator } from 'react-navigation-stack'\n\n//import conponents\nimport NavBar from './components/NavBar';\nimport ChatBox from './screens/ChatBox';\nimport LoginScreen from './screens/LoginScreen';\n\n//import contexts\nimport AuthContext from './contexts/AuthContext'\n\n//import firebase utils\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport * as FirebaseCore from 'expo-firebase-core';\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n//import mobile google signin\nimport * as GoogleSignIn from 'expo-google-sign-in';\nimport CreateRoomScreen from './components/CreateRoomScreen';\nimport UsersRooms from './components/UsersRooms';\nimport LoadingScreen from './screens/LoadingScreen';\n\n//initilase firebase\nif (!firebase.apps.length) {\n  firebase.initializeApp(FirebaseCore.DEFAULT_APP_OPTIONS);\n} else {\n  firebase.app(); // if already initialized, use that one\n}\nconst auth = firebase.auth();\nconst firestore = firebase.firestore()\n\n\n//create navigator stack\nconst MainNavigator = createStackNavigator(\n  {\n    Chat: ChatBox\n  },\n  {\n    headerMode: 'none'\n  }\n)\nconst AppNavigator = createAppContainer(MainNavigator)\n\n\nexport default function App() {\n  //states\n  const [userMobile, setUserMobile] = useState(null);\n  const [user] = useAuthState(auth);\n  const [roomCode, setRoomCode] = useState('$KVUXRARV9U')\n  const [loadingApp, setLoadingApp] = useState(true)\n\n  const messageRef = firestore.collection('rooms').doc(roomCode).collection('messages')\n  const query = messageRef.orderBy('createdAt', 'desc').limit(25);\n  const [messages] = useCollectionData(query)\n\n  useEffect(() => {\n    if (Platform.OS == 'android' || Platform.OS == 'ios') {\n      initAsync()\n    }\n  }, [])\n\n\n\n  //setup context provider values\n  const value = { auth, firestore, messageRef, messages, setRoomCode, roomCode, setLoadingApp }\n\n  //style sheet for app\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      flexDirection: 'row',\n      flexGrow: 0,\n      justifyContent: 'center',\n      backgroundColor: '#2A2B2D',\n    },\n  });\n\n  //////////////google sign in stuff\n\n\n  const initAsync = async () => {\n    await GoogleSignIn.initAsync();\n    _syncUserWithStateAsync();\n  };\n\n  const _syncUserWithStateAsync = async () => {\n    const userMobileNew = await GoogleSignIn.signInSilentlyAsync();\n    const credential = firebase.auth.GoogleAuthProvider.credential(userMobileNew.idToken, userMobileNew.accessToken)\n    // login with credential\n    console.log('logged in with credentials: uid : ' + userMobileNew.idToken);\n    auth.signInWithCredential(credential);\n    //setUserMobile(userMobileNew)\n  };\n\n\n  const signOutAsync = async () => {\n    await GoogleSignIn.signOutAsync();\n    setUserMobile(null)\n  };\n  const signInAsync = async () => {\n    try {\n      await GoogleSignIn.askForPlayServicesAsync();\n      const { type, user } = await GoogleSignIn.signInAsync();\n      if (type === 'success') {\n        _syncUserWithStateAsync();\n        console.log('signed in')\n      }\n    } catch ({ message }) {\n      alert('login: Error:' + message);\n    }\n  };\n  ///////////\n\n  return (\n    <>\n    <TextInput placeholder='Enter email' onChangeText={text =>setEmail(text)} style={styles.CredentialsTextInput} value={email}></TextInput>\n    <View style={styles.container}>\n      {loadingApp ? null : null}\n      <AuthContext.Provider value={value}>\n        {auth.currentUser ? <UsersRooms /> : null}\n        <NavBar />\n        {user ? <ChatBox /> : <LoginScreen googleLogin={signInAsync} />}\n      </AuthContext.Provider>\n    </View>\n    </>\n\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}