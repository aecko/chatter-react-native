{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Seamus\\\\Documents\\\\ChatApp\\\\chat-app\\\\screens\\\\LoginScreen.js\";\nimport React, { useState, useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { TouchableOpacity, TextInput } from 'react-native-gesture-handler';\nimport * as GoogleSignIn from 'expo-google-sign-in';\nimport firebase from 'firebase';\nimport 'firebase/auth';\nimport AuthContext from \"../contexts/AuthContext\";\nexport default function LoginScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useContext = useContext(AuthContext),\n      auth = _useContext.auth,\n      setLoadingApp = _useContext.setLoadingApp;\n\n  var signInWithGoogle = function signInWithGoogle() {\n    if (Platform.OS == 'android' || Platform.OS == 'ios') {\n      props.googleLogin();\n    } else {\n      console.log('helllooo there phone');\n      var provider = new firebase.auth.GoogleAuthProvider();\n      auth.signInWithRedirect(provider);\n    }\n  };\n\n  var signInWithEmail = function signInWithEmail() {\n    auth.signInWithEmailAndPassword(email, password);\n  };\n\n  var signUpWithEmail = function signUpWithEmail() {\n    auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  var fontRatio = PixelRatio.getFontScale();\n\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width,\n      height = _useWindowDimensions.height;\n\n  var styles = StyleSheet.create({\n    LoginContainer: {\n      position: 'absolute',\n      top: 0.07 * height,\n      left: 0,\n      flex: 1,\n      flexDirection: 'column',\n      backgroundColor: '#2A2B2DFF',\n      alignItems: 'center',\n      justifyContent: 'flex-start',\n      minHeight: 0.93 * height,\n      maxHeight: 0.93 * height,\n      width: width\n    },\n    LoginTitle: {\n      fontSize: 40,\n      color: '#fff',\n      marginTop: 10 * fontRatio\n    },\n    loginButton: {\n      backgroundColor: '#D9514EFF',\n      borderRadius: 25,\n      marginBottom: 20 * fontRatio,\n      height: 100\n    },\n    LoginText: {\n      padding: 10 * fontRatio,\n      color: '#fff',\n      fontSize: 30\n    },\n    CredentialsTextInput: {\n      height: 70 * fontRatio,\n      width: 200,\n      fontSize: 15 * fontRatio,\n      backgroundColor: '#d5d8dc',\n      borderRadius: 20,\n      marginBottom: 10 * fontRatio,\n      textAlign: 'center'\n    }\n  });\n  return React.createElement(View, {\n    style: styles.LoginContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.LoginTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Login\"), React.createElement(TextInput, {\n    placeholder: \"Enter email\",\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    style: styles.CredentialsTextInput,\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Enter password\",\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    style: styles.CredentialsTextInput,\n    value: password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return signInWithEmail();\n    },\n    style: styles.loginButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.LoginText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, \"Sign in with email\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return signUpWithEmail();\n    },\n    style: styles.loginButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.LoginText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"Sign up with email\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return signInWithGoogle();\n    },\n    style: styles.loginButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.LoginText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Sign in with Google\")));\n}","map":{"version":3,"sources":["C:/Users/Seamus/Documents/ChatApp/chat-app/screens/LoginScreen.js"],"names":["React","useState","useContext","TouchableOpacity","TextInput","GoogleSignIn","firebase","AuthContext","LoginScreen","props","email","setEmail","password","setPassword","auth","setLoadingApp","signInWithGoogle","Platform","OS","googleLogin","console","log","provider","GoogleAuthProvider","signInWithRedirect","signInWithEmail","signInWithEmailAndPassword","signUpWithEmail","createUserWithEmailAndPassword","fontRatio","PixelRatio","getFontScale","useWindowDimensions","width","height","styles","StyleSheet","create","LoginContainer","position","top","left","flex","flexDirection","backgroundColor","alignItems","justifyContent","minHeight","maxHeight","LoginTitle","fontSize","color","marginTop","loginButton","borderRadius","marginBottom","LoginText","padding","CredentialsTextInput","textAlign","text"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { StyleSheet, Text, View, Image, useWindowDimensions,PixelRatio, Platform} from 'react-native'\r\nimport { TouchableOpacity , TextInput} from 'react-native-gesture-handler'\r\nimport * as GoogleSignIn from 'expo-google-sign-in';\r\nimport firebase from 'firebase'\r\nimport 'firebase/auth'\r\nimport AuthContext from '../contexts/AuthContext';\r\n\r\nexport default function LoginScreen(props) {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const {auth, setLoadingApp} = useContext(AuthContext)\r\n    const signInWithGoogle = () =>{\r\n        if(Platform.OS == 'android' || Platform.OS == 'ios'){\r\n            props.googleLogin()\r\n        }\r\n        else{\r\n            console.log('helllooo there phone')\r\n            const provider = new firebase.auth.GoogleAuthProvider();\r\n            auth.signInWithRedirect(provider);\r\n        }\r\n    }\r\n    const signInWithEmail = () =>{\r\n        auth.signInWithEmailAndPassword(email, password)\r\n    }\r\n    const signUpWithEmail = () =>{\r\n        auth.createUserWithEmailAndPassword(email, password)\r\n    }\r\n    const fontRatio = PixelRatio.getFontScale()\r\n\r\n    const {width, height} = useWindowDimensions()\r\n    const styles = StyleSheet.create({\r\n        LoginContainer :{\r\n            position: 'absolute',\r\n            top: 0.07* height,\r\n            left: 0,\r\n            flex : 1,\r\n            flexDirection: 'column',\r\n            backgroundColor : '#2A2B2DFF',\r\n            alignItems : 'center',\r\n            justifyContent : 'flex-start',\r\n            minHeight: 0.93*height,\r\n            maxHeight: 0.93*height,\r\n            width: width\r\n            \r\n        },\r\n        LoginTitle: {\r\n            fontSize: 40, \r\n            color: '#fff',\r\n            marginTop: 10* fontRatio,\r\n        },  \r\n        loginButton: {\r\n            backgroundColor: '#D9514EFF',\r\n            borderRadius: 25,\r\n            marginBottom: 20* fontRatio,\r\n            height: 100\r\n            \r\n            \r\n        },\r\n        LoginText: {\r\n            padding: 10* fontRatio,\r\n            color: '#fff',\r\n            fontSize: 30\r\n    \r\n        },\r\n        CredentialsTextInput: {\r\n            height: 70 * fontRatio,\r\n            width:  200,\r\n            fontSize: 15 * fontRatio,\r\n            backgroundColor: '#d5d8dc',\r\n            borderRadius: 20,\r\n            marginBottom: 10 * fontRatio,\r\n            textAlign: 'center',\r\n        },\r\n    \r\n    })\r\n\r\n    return (\r\n        <View style={styles.LoginContainer}>\r\n            <Text style={styles.LoginTitle}>Login</Text>\r\n            <TextInput placeholder='Enter email' onChangeText={text =>setEmail(text)} style={styles.CredentialsTextInput} value={email}></TextInput>\r\n            <TextInput placeholder='Enter password' onChangeText={text =>setPassword(text)} style={styles.CredentialsTextInput} value={password}></TextInput>\r\n            <TouchableOpacity onPress={() => signInWithEmail()} style={styles.loginButton}>\r\n                <Text style={styles.LoginText}>Sign in with email</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity onPress={() => signUpWithEmail()} style={styles.loginButton}>\r\n                <Text style={styles.LoginText}>Sign up with email</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity onPress={() => signInWithGoogle()} style={styles.loginButton}>\r\n                <Text style={styles.LoginText}>Sign in with Google</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}